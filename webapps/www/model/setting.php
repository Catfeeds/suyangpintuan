<?php/** * Class setting_model */class setting_model extends Lowxp_Model {	private $baseTable = '###_config';	function __construct() {}	//获取设置 配置	function value($varname = '', $value = '', $langid = '') {		$array = array();		//Feng  2016-04-05  start  更改商户配置路径		//$data = $this->base->read_static_cache('web_config');		$data = $this->base->read_static_cache('config');		if ($data === false) {			$res = $this->db->select("SELECT varname,value FROM " . $this->baseTable);			if (!empty($res)) {				foreach ($res as $v) {					$array[$v['varname']] = $v['value'];				}			}			//$this->base->write_static_cache('web_config', $array);			$this->base->write_static_cache('config', $array);			//Feng  2016-04-05 end		} else {			$array = $data;		}		return $array;	}	//获取配置，格式化数据，用于form_field	function formInfo($group) {		$dataTable = $this->baseTable;		$rows      = $this->db->select("SELECT * FROM $dataTable WHERE `lang` IN(0," . LANG_ID . ") AND `group`='$group' ORDER BY listorder");		$array = array();		foreach ($rows as $k => $val) {			$val['setup'] = json_decode($val['step'], true);			$val['type']  = $val['form_type'] ? $val['form_type'] : 'text';			$val['field'] = $val['varname'];			unset($val['step'], $val['form_type'], $val['varname']);			$array[$val['field']] = $val;		}		return $array;	}	//更新配置	function update($post) {		$res = false;		#表单验证		$return = $this->checkfield($post);		if (!empty($return['error'])) {return $return['error'];}		$post = $return['post'];		foreach ($post as $k => $v) {			$k             = trim($k);			$v             = is_array($v)?$v:trim($v);			$where         = "varname='$k' AND lang IN(0," . LANG_ID . ")";			$data['value'] = is_array($v)?join(',',$v):$v;			$res           = $this->db->save($this->baseTable, $data, '', $where);		}		if (false === $res) {return array('code' => 10002, 'message' => '数据操作失败!');} //未知错误		else {			admin_log('更新站点配置');			$this->base->clear_caches('static');			return array('code' => 0, 'type' => 'update', 'message' => '更新成功');		}	}	#处理并验证post数据	function checkfield($postdata) {		$fields = $this->formInfo($postdata['group']);		$error  = '';		foreach ($postdata as $key => $val) {			$key = trim($key);			$val = trim($val);			if (in_array($fields[$key]['type'], array('image', 'file', 'images', 'files'))) {				$arrData = array();				if (is_array($postdata[$key])) {					foreach ($postdata[$key]['path'] as $k => $v) {						$arrData[$k]['path']  = $v;						$arrData[$k]['title'] = $postdata[$key]['title'][$k];                        $arrData[$k]['iosurl'] = $postdata[$key]['iosurl'][$k];                        $arrData[$k]['anurl'] = $postdata[$key]['anurl'][$k];					}				}				$postdata[$key] = json_encode($arrData);			}		}		return array('post' => $postdata, 'error' => $error);	}	//添加自定义变量	function add($post) {		#表单处理		if (empty($post['varname'])) {return array('code' => 10001, 'message' => '请输入变量名称!');}		if (empty($post['title'])) {return array('code' => 10001, 'message' => '请输入变量介绍!');}		#重复处理		$res = $this->db->select("select * from " . $this->baseTable . " where varname='" . $post['varname'] . "' AND lang IN(0," . LANG_ID . ")");		if ($res) {return array('code' => 10003, 'message' => '变量名称已经存在，请更换!');}		#默认值		$post['user'] = 1;		$post['lang'] = LANG_ID;		#排序值在添加的分组下最大值上加1		$res_max           = $this->db->get("SELECT MAX(`listorder`) AS max FROM " . $this->baseTable . " WHERE `group`='" . $post['group'] . "' AND `lang` IN(0," . LANG_ID . ")");		$post['listorder'] = (int) $res_max['max'] + 1;		#保存		$res = $this->db->save($this->baseTable, $post, '');		if (false === $res) {return array('code' => 10002, 'message' => '对不起, 保存失败');} //未知错误		else {			admin_log('添加站点配置变量：' . $post['title']);			$this->base->clear_caches('static');			return array('code' => 0, 'type' => 'insert', 'message' => '自定义变量添加成功');		}	}	//增加订单数	function logCount($num = 1) {		$this->db->update($this->baseTable, "value=value+$num", array('varname' => 'order_num'));		$logCount = $this->db->getstr("SELECT value FROM " . $this->baseTable . " WHERE varname='order_num' LIMIT 1");		#单独写入缓存		$this->base->write_static_cache('order_count', array('logCount' => $logCount), '');	}	/**	 * 根据设备类型显示对应的页面(手机,网页)	 * @return string	 */	function getTplByDevice() {        $tpl = $tplTrue = '';        $www = getUrl('www');        //保存真实的终端 simple mobile        if ($this->useragent->is_mobile() || in_array(Edition,array("enter_one","one"))) {            if(C("skin_tpl")){                $tpl  = C("skin_tpl");            }else{                $tpl  = 'mobile';            }        }        //招商分离        $zs_url = C('zs_url');        if($zs_url){            if(Domain==$zs_url){                $tpl  = '';            }else{                $tpl  = 'mobile';            }        }        if($www=='m'){            $tpl = 'mobile';        }elseif(!isset($_GET['tpl']) && !isset($_SESSION['tpl'])){            $tpl = $tpl;        }elseif(isset($_GET['tpl']) && in_array(trim($_GET['tpl']),array('pc', 'mobile','simple'))){            if($_GET['tpl']=='pc')$_GET['tpl']='';            $_SESSION['tpl'] = $tpl = trim($_GET['tpl']);        }elseif(isset($_SESSION['tpl'])){            $tpl = $_SESSION['tpl'];        }        $tplTrue = $tpl;        define('STPL', $tplTrue);        $tpl = in_array($tpl, array('pc', 'mobile','simple')) ? $tpl : '';                		return $tpl;	}}