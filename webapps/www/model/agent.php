<?php/** * 分销代理类 * Class mall_model */class agent_model extends Lowxp_Model {	/**	 * 根据ID,获取代理详情.	 * @param $id	 * @return array|mixed	 */	function getAgentOne($id) {		if (empty($id)) {			return '';		}		$sql = "select a.*,b.username from `###_member_agent` as a left join `###_member` as b on a.mid=b.mid where a.id='{$id}' ";		$res = $this->db->get($sql);		return $res;	}	/**	 * 根据ID,.	 * @param $id	 * @return array|mixed	 */	function updateStatus() {		$id = $_POST['id'];                $post           = $_POST['post'];		if (empty($id)) {			return array('code' => 10001, 'type' => 'update', 'message' => 'ID不能为空');		}                		if (empty($post['rank']) && $post['type']==1) {			return array('code' => 10001, 'type' => 'update', 'message' => '合伙人等级不能为空');		}                if($post['type']==2){                    $post['areaid'] = $post['areaid'][0];                    if(empty($post['areaid']))return array('code' => 10001, 'type' => 'update', 'message' => '代理省不能为空');                }                if($post['type']==3){                    $post['areaid'] = $post['areaid'][1];                    if(empty($post['areaid']))return array('code' => 10001, 'type' => 'update', 'message' => '代理市不能为空');                }                        		$post['u_time'] = time();		$res            = $this->db->update('member_agent', $post, array("id" => $id));		if (false !== $res) {			if ($post['status'] == 1) {#审核通过				if ($post['type'] == 1) {					#合伙人					$r       = $this->db->update('member', array('partner_rank' => $post['rank']), array("mid" => $post['mid']));					$mid_str = $this->getInvIdsAll($post['mid']);					$sql     = "UPDATE ###_member SET partner_id='{$post['mid']}' where mid in ({$mid_str})";					$this->db->query($sql);				} elseif ($post['type'] == 2) {					$r = $this->db->update('member', array('partner_rank' => '-1'), array("mid" => $post['mid']));				} elseif ($post['type'] == 3) {					$r = $this->db->update('member', array('partner_rank' => '-2'), array("mid" => $post['mid']));				}				// 模版消息 11 合伙人或代理申请被通过 {插入昵称},{插入链接}				// template_msg_action start				$this->load->model('template_msg');				$msgParams = array(getUsername($post['mid']), "/agent");                                if($post['type'] == 1){                                    $this->template_msg->inQueue(25, $post['mid'], $msgParams);                                                                    }else{                                    $this->template_msg->inQueue(11, $post['mid'], $msgParams);                                } 				// template_msg_action end			} elseif ($post['status'] == 2) {#审核不通过				$r = $this->db->update('member', array('partner_rank' => '0'), array("mid" => $post['mid']));				if ($post['type'] == 1) {					$this->db->update('member', array("partner_id"=>0), array("partner_id"=>$post['mid']));				}				$post['remark'] = empty($post['remark']) ? "条件不符合" : $post['remark'];				// 模版消息 12 合伙人或代理申请被拒绝 {插入理由},{插入店铺}				// template_msg_action start				$this->load->model('template_msg');				$msgParams = array($post['remark'], C('site_name'));                                if($post['type'] == 1){                                    $this->template_msg->inQueue(26, $post['mid'], $msgParams);                                                                    }else{                                    $this->template_msg->inQueue(12, $post['mid'], $msgParams);                                }				// template_msg_action end			}else{					$r = $this->db->update('member', array('partner_rank' => '0'), array("mid" => $post['mid']));					if ($post['type'] == 1) {						$this->db->update('member', array("partner_id"=>0), array("partner_id"=>$post['mid']));					}			}			return array('code' => 0, 'type' => 'update', 'message' => '更新成功');		} else {			return array('code' => 10001, 'type' => 'update', 'message' => '更新失败');		}	}	/**	 * 获取分销商等级详情	 *  @return array|mixed	 */	function getCommsRankOne($id) {		if ($id == false) {			return false;		}		$list = S("CM_COMMS_RANK");		if ($list) {			return $list[$id];		} else {			$sql = "select * from `###_member_comms_rank` where id='{$id}'";			$res = $this->db->get($sql);			if ($res) {				//$res['comss_array'] = unserialize($res['comss']);				$res['comss_scale_array'] = unserialize($res['comss_scale']);				$res['conditions_array']  = unserialize($res['conditions']);				return $res;			} else {				return false;			}		}	}	/**	 * 获取分销商等级分佣比例	 *  @return array|mixed	 */	function getComssRank($id) {		if ($id == false) {			return false;		}		$sql = "select * from `###_member_comms_rank` where id='{$id}'";		$res = $this->db->get($sql);		if ($res) {			$res['comss_scale_array'] = unserialize($res['comss_scale']);			return $res['comss_scale_array'];		} else {			return false;		}	}	/**	 * 获取代理商等级列表	 *  @return array|mixed	 */	function getCommsRankList() {		$list = S("CM_COMMS_RANK");		if ($list) {			return $list;		} else {			$sql = "select * from `###_member_comms_rank` order by listorder desc";			$res = $this->db->select($sql);			if ($res) {				foreach ($res as $k => $v) {					// $res[$k]['comss_array']       = unserialize($v['comss']);					$v['comss_scale_array'] = unserialize($v['comss_scale']);					$v['conditions_array']  = unserialize($v['conditions']);					$list[$v['id']]         = $v;				}				S("CM_COMMS_RANK", $list);				return $list;			} else {				return false;			}		}	}	/**	 * 根据条件判断分销商等级	 * @param $mid	 * @return array|mixed	 */	function getComss($mid,$conditions=false) {		if ($mid == false) {			return false;		}		$row        = $this->db->get("select agent_rank,commission_total from ###_member where mid={$mid}");		$agent_rank = $row['agent_rank'];		$agent_list = $this->getCommsRankList();		if ($agent_list == false) {			return false;		}		//获取不为空的条件		$key_array = array();		foreach ($agent_list as $k => $v) {			$key_array = array_merge($key_array, array_filter($v['conditions_array']));		}		$key_array = array_keys($key_array);		//升级条件 0：交易完成金额  1:已付款金额		$is_upgrade_status = C("is_upgrade_status") ? C("is_upgrade_status") : 0;		$where_status      = $is_upgrade_status ? 'status_pay' : 'status_order';		$res = array();		//总佣金		if (in_array("comss", $key_array)) {			$res_commission = $row['commission_total'];			$res['comss']   = isset($res_commission['commission_total']) ? $res_commission['commission_total'] : 0;		}		//订单总金额		if (in_array("order", $key_array)) {			$sql              = "select sum(order_amount) as num from `###_goods_order` where {$where_status}=10 and mid='{$mid}' ";			$res_order_amount = $this->db->get($sql);			$res['order']     = $res_order_amount['num'];		}		//分销商带来的订单总额		if (in_array("agent_order", $key_array)) {			$mid_str = $this->getInviteTreeIds($mid);			if ($mid_str) {				$sql                    = "select sum(order_amount) as num from `###_goods_order` where {$where_status}=10 and mid in ({$mid_str}) ";				$res_agent_order_amount = $this->db->get($sql);			}			$res['agent_order'] = isset($res_agent_order_amount['agent_order']) ? $res_agent_order_amount['agent_order'] : 0;		}		//发展的分销商数		if (in_array("agent_total", $key_array)) {			$mid_str = $this->getInviteTreeIds($mid);			if ($mid_str) {				$agent_num = count(explode(',', $mid_str));			}			$res['agent_total'] = isset($agent_num) ? $agent_num : 0;		}		//直属下级分销商数量		if (in_array("agent_num", $key_array)) {			$sql              = "select count(1) as num from `###_member` where ivt_id in({$mid}) ";			$res_agent        = $this->db->get($sql);			$res['agent_num'] = $res_agent['num'];		}                               		//判断用户代理等级		foreach ($agent_list as $k => $v) {			//过滤为空的条件			$v['conditions_array'] = array_filter($v['conditions_array']);			if ($v['con_join'] == 1) {//与				$rank = true;				foreach ($v['conditions_array'] as $key => $val) {					if ($res[$key] < $val) {						$rank = false;					}				}			} else {//或				$rank = false;				foreach ($v['conditions_array'] as $key => $val) {					if ($res[$key] >= $val) {						$rank = true;						break;					}				}			}			if ($rank && $v['comss_scale_array'][1] > $agent_list[$agent_rank]['comss_scale_array'][1]) {#判断会员表里面的分销等级字段				$this->db->update("member", array("agent_rank" => $v['id']), array("mid" => $mid)); #更新分销等级				return $v;			}		}                if($conditions){#返回当前等级条件                    return $res;                }elseif ($agent_rank > 0) {#后台可调整会员分销等级                    return $agent_list[$agent_rank];		}	}	#根据配置获取下级会员	function getInviteTreeIds($mid, $level = 1, &$res = '') {		if ($level > COMSS_LEVEL) {return trim($res, ',');}		$sql  = "select mid from `###_member` where ivt_id in({$mid})";		$temp = $this->db->select($sql);		if ($temp) {			$mid = join(",", array_column($temp, 'mid'));			$res .= "," . $mid;			$level++;			$this->getInviteTreeIds($mid, $level, $res);		}		return trim($res, ',');	}	#获取下级所有会员	function getInvIdsAll($mid, $level = 1, &$res = '') {		$sql  = "select p1.mid,p1.*,p2.c_time,p2.nickname from `###_member` as p1 left join ###_member_detail as p2 on p1.mid=p2.mid where p1.ivt_id in({$mid})";		$temp = $this->db->select($sql);		if ($temp) {			$mid = join(",", array_column($temp, 'mid'));			$res .= "," . $mid;			$level++;			$this->getInvIdsAll($mid, $level, $res);		}		return trim($res, ',');	}	#获取下级分销商列表 向下	function getInviteLevelList($mid, $level = 1, &$res = array()) {		if ($level > COMSS_LEVEL) {return $res;}		$sql  = "select p1.mid,p1.*,p2.c_time,p2.nickname from `###_member` as p1 left join ###_member_detail as p2 on p1.mid=p2.mid where p1.ivt_id in({$mid})";		$temp = $this->db->select($sql);		if ($temp) {			$mid         = join(",", array_column($temp, 'mid'));			$res[$level] = $temp;			$level++;			$this->getInviteLevelList($mid, $level, $res);		}		return $res;	}	#获取佣金记录	function getCommission($data = array(), $limit = '', $page = 1, $order = "id desc") {		$where = " WHERE 1 ";		if ($data['order_id']) {			$where .= " AND order_id=" . $data['order_id'];		}		if ($data['mid']) {			$where .= " AND mid=" . $data['mid'];		}		if ($data['where']) {			$where .= $data['where'];		}		$sql = "SELECT * from ###_commission {$where} ORDER BY {$order}";		if ($limit == "all") {			$list = $this->db->select($sql);		} else {			$this->load->model('page');			$_GET['page'] = $page;			if (intval($limit) > 0) {				$this->page->set_vars(array('per' => intval($limit)));			}			$list = $this->page->hashQuery($sql)->result_array();//			foreach ($list as $k => $v) {//				$list[$k]['desc'] = $v['level'];//				if ($v['level'] > 0) {//					$list[$k]['desc'] = $v['level'] . "级下家【" . $v['ivt_username'] . "】下单抽成:" . $v['commission'];//				} else {//					$list[$k]['desc'] = $v['desc'] . ":" . $v['commission'];//				}//			}		}		return $list;	}                //获取会员当前分销等级，比例，距离下一级的条件        function userNextComm($member){            $comm_list = $this->getCommsRankList();            $member_comm = $comm_list[$member['agent_rank']];            $res = $next_arr = array();            $res['name'] = $member_comm['name'];            $res['scale'] = $member_comm['comss_scale_array'][1];                        /*foreach($comm_list as $k=>$v){                if($v['comss_scale_array'][1]<=$res['scale'])break;                $next_arr[$k] = $v;            }*/            foreach($comm_list as $v){                $temp[$v['listorder']] = $v;            }                        foreach($temp as $k=>$v){                if($member_comm['listorder']>=$k)continue;                $next_arr[$k] = $v;            }                         if(!empty($next_arr)){                $next = end($next_arr);                $res['next_scale'] = $next['comss_scale_array'][1];                $res['next_join'] = $next['con_join']==0?"或":"与";                $con = $this->getComss($member['mid'],true);                foreach($next['conditions_array'] as $key=>$val){                    $res['next_'.$key] = $val-$con[$key];                }            }else{                $res['no_next'] = 1;            }                                    return $res;        }}