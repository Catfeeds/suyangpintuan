<?php/** * 商家模型 */class business_model extends Lowxp_Model{    public $business_power = 0; #商家功能总开关    public $baseTable = '###_business';    public $memberTable = '###_member';    public $bankcardTable = '###_business_bankcard';    public $state = array(        1=>'待商家确认',        2=>'商家已确认',        //3=>'平台已审核',        4=>'结算完成'        );        function __construct(){}    /** 获取单条商家信息     * @param string $where     * @param string $field     * @return array|null     */    function get($id, $field='*'){        $id = intval($id);        $sql = "select $field from ".$this->baseTable." WHERE id=".$id;        $row = $this->db->get($sql);        return $row;    }      /** 获取单条商家信息     * @param string $where     * @param string $field     * @return array|null     */    function get_bank_card($bid, $field='*'){        $bid = intval($bid);        $sql = "select $field from ".$this->bankcardTable." WHERE sid=".$bid;        $row = $this->db->get($sql);        return $row;    }  		/** 获取商家提现申请记录     * @param string $where     * @param string $field     * @return array|null     */    function get_withdrawals_log($id, $field='*'){        $id = intval($id);        $sql = "select $field from ###_withdraw_commission_sid WHERE id=".$id;        $row = $this->db->get($sql);        return $row;    }  		/**     * 账户日志     * 冻结余额时可用相应进行调整     */    function accountlog($stage = 'admin', $input)    {    	$log_arr = array();    	$log_arr['mid'] = $input['mid'];    	if($input['username']){    		$business = $this->get($input['mid'],'name');    		$input['username'] = $business['name'];    	}    	$log_arr['username'] = $input['username'];    	$log_arr['stage'] = $stage;    	$log_arr['desc'] = $input['desc'];    	$log_arr['logtime'] = RUN_TIME;    	$log_arr['user_money'] = $logs['user_money'] = isset($input['user_money']) ? $input['user_money'] : 0;    	$set_arr = array();    	foreach ($logs as $k => $v) {    		$set_arr[] = "$k = $k+('$v')";    	}    	//记录日志    	$this->db->insert('###_account_log', $log_arr);    	$r = $this->db->update($this->baseTable, implode(',', $set_arr), "id = '$log_arr[mid]'");        	return false !== $r    	? array(    			'code' => '0',    			'message' => '更新成功',    	) : $r;    }        /**     * 商家结算     */	function billlog($stage = 'bill', $input)    {    	$bill_log = array();    	$bill_log['sid'] = $input['sid'];    	if($bill_log['name']){    		$business = $this->get($input['mid'],'name');    		$input['name'] = $business['name'];    	}    	$bill_log['name'] = $input['name'];    	$bill_log['coupon_id_num'] = $input['coupon_id_num'];    	$bill_log['coupon_id_sid_num'] = $input['coupon_id_sid_num'];    	$bill_log['comm_amount'] = $input['comm_amount'];    	$bill_log['order_sn'] = $input['order_sn'];    	$bill_log['stage'] = $stage;    	$bill_log['desc'] = $input['desc'];    	$bill_log['logtime'] = RUN_TIME;    	$bill_log['user_money'] = $logs['user_money'] = isset($input['user_money']) ? $input['user_money'] : 0;    	$set_arr = array();    	foreach ($logs as $k => $v) {    		$set_arr[] = "$k = $k+('$v')";    	}    	//记录日志    	$this->db->insert('###_business_bills', $bill_log);    	$r = $this->db->update($this->baseTable, implode(',', $set_arr), "id = '{$bill_log['sid']}'");        	return false !== $r    	? array(    			'code' => '0',    			'message' => '更新成功',    	) : $r;    }	    /**     * 商家结算     */    function get_bill($bid=0,$option = array(),$page=1){        $where = " where 1 ";        if($option['where'])$where.=$option['where'];        if($bid>0){            $where .=" and sid=".intval($bid);        }        if($option['state']>0){            $where .=" and state=".intval($bid);        }        $orderby = " order by no desc";        $this->load->model('page');        $_GET['page'] = $page;		        $sql = "select * from ###_business_bill {$where} {$orderby}";        $list = $this->page->hashQuery($sql)->result_array();               foreach($list as $k=>$v){            $list[$k]['state_name'] = $this->state[$v['state']];        }        return $list;            }        /**     * 账单详情     */    function get_bill_one($no=0){                $sql = "select * from ###_business_bill where no={$no}";           $res = $this->db->get($sql);        if($res){            $res['state_name'] = $this->state[$res['state']];            $res['bankcard'] = $this->db->get("select * from ###_business_bankcard where sid={$res['sid']}");        }                return $res;            }        /**     * 修改账单     */    function update_bill(){        $post = $_POST['post'];        if(empty($post['no']))return false;        $res = $this->db->update("business_bill",$post,array("no"=>$post['no']));                return $res;            }        /**     * 生成上月账单     */    function create_order_bill(){                        $order_statis_max_info = $this->db->getstr("select end_date from ###_business_bill order by month desc","end_date");            //计算起始时间点，自动生成以月份为单位的空结算记录            if (!$order_statis_max_info){                $order_min_info = $this->db->getstr("select min(pay_time) as pay_time from ###_goods_order where status_pay=10 and sid>0 and pay_time>0", "pay_time");                                $start_unixtime = $order_min_info>0 ? $order_min_info : RUN_TIME;            } else {                $start_unixtime = $order_statis_max_info;            }                        $data = array();            $i = 1;            $start_unixtime = strtotime(date('Y-m-01 00:00:00', $start_unixtime));            $current_time = strtotime(date('Y-m-01 00:00:01',RUN_TIME));                               while (($time = strtotime('-'.$i.' month',$current_time)) >= $start_unixtime) {                if (date('Ym',$start_unixtime) == date('Ym',$time)) {                    //如果两个月份相等检查库是里否存在                    $order_statis = $this->db->get("select 1 from ###_business_bill where month=".date('Ym',$start_unixtime));                    if ($order_statis) {                        break;                    }                }                $first_day_unixtime = strtotime(date('Y-m-01 00:00:00', $time));	//该月第一天0时unix时间戳                $last_day_unixtime = strtotime(date('Y-m-01 23:59:59', $time)." +1 month -1 day"); //该月最后一天最后一秒时unix时间戳                $key = count($data);                $month = date('Ym',$first_day_unixtime);                $data[$key]['month'] = $month;                $data[$key]['year'] = date('Y',$first_day_unixtime);                $data[$key]['start_date'] = $first_day_unixtime;                $data[$key]['end_date'] = $last_day_unixtime;                //生成所有店铺月订单出账单                $this->_create_real_order_bill($data[$key]);                 $i++;            }                    }                /**        * 生成所有店铺月订单出账单        *        * @param int $data        */       function _create_real_order_bill($data){                     //取店铺表数量(因为可能存在无订单，但有店铺活动费用，所以不再从订单表取店铺数量)               $store_count = $this->db->getstr("select count(1) as num  from ###_business where status=1","num");           //分批生成该月份的店铺空结算表，每批生成300个店铺           $insert = false;           for ($i=0;$i<=$store_count;$i=$i+300){                                      $store_list = $this->db->select("select id,name,percentage from ###_business where status=1 limit {$i},300");               if ($store_list){                   //自动生成以月份为单位的空结算记录                   foreach($store_list as $store_info){                       $data_bill = array();                       $data_bill['no'] = $data['month'].$store_info['id'];                       $data_bill['start_date'] = $data['start_date'];                       $data_bill['end_date'] = $data['end_date'];                       $data_bill['month'] = $data['month'];                       $data_bill['state'] = 0;                       $data_bill['sid'] = $store_info['id'];                       $data_bill['name'] = $store_info['name'];                       $res = $this->db->get("select 1 from ###_business_bill where no='{$data_bill['no']}'");                       if (!$res) {                           $insert = $this->db->insert("business_bill",$data_bill);                           if (!$insert) {                               throw new Exception('生成账单['.$data_bill['no'].']失败');                           }                           //对已生成空账单进行销量、退单、佣金统计                           $data_bill['percentage'] = $store_info['percentage'];                           $update = $this->_calc_real_order_bill($data_bill);                           if (!$update){                               throw new Exception('更新账单['.$data_bill['no'].']失败');                           }                       }                   }               }           }       }       /**        * 计算某月内，某店铺的销量，退单量        *        * @param array $data_bill        */       function _calc_real_order_bill($data_bill){                      $update = array();           //订单金额                               $order_info = $this->db->get("select sum(order_amount) as order_amount,sum(shipping_fee) as shipping_amount,sum(comm_amount) as comm_amount from ###_goods_order where sid={$data_bill['sid']} and pay_time>={$data_bill['start_date']} and pay_time<={$data_bill['end_date']} and status_pay=10 ");           $update['order_totals'] = floatval($order_info['order_amount']);           //运费           $update['shipping_totals'] = floatval($order_info['shipping_amount']);           //佣金           $update['commis_totals'] = floatval($order_info['comm_amount']);                      //退款总额                      //$order_info = $this->db->get("select sum(order_amount) as order_amount from ###_goods_order where sid={$data_bill['sid']} and pay_time>={$data_bill['start_date']} and pay_time<={$data_bill['end_date']} and status_order=3");           $order_info = $this->db->get("select sum(refund_amount) as refund_amount from ###_refund where sid={$data_bill['sid']} and status_refund=10 and u_time>={$data_bill['start_date']} and u_time<={$data_bill['end_date']}");           $update['order_return_totals'] = $order_info['refund_amount'];           //commis_totals           //本期应结           $update['result_totals'] = $update['order_totals'] - $update['order_return_totals']-$update['commis_totals']-$update['shipping_totals'];           //平台佣金           if($data_bill['percentage']>0){               $update['system_comm'] = round($update['result_totals']*$data_bill['percentage']*0.01,2);               $update['result_totals'] = $update['result_totals']-$update['system_comm'];           }           $update['create_date'] = RUN_TIME;           $update['state'] = 1;           return $this->db->update("business_bill",$update,array('no'=>$data_bill['no']));       }    }