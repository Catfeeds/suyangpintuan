<?phpclass Base_Library extends Lowxp_Model {	/**	 * 转义字符串或数组	 * @param $string 需要处理的字符串或数组	 * @return mixed	 */	function new_addslashes($string) {		if (!get_magic_quotes_gpc()) {			if (!is_array($string)) {				return addslashes($string);			}			foreach ($string as $key => $val) {				$string[$key] = $this->new_addslashes($val);			}		}		return $string;	}	/**	 * 反转义字符串或数组	 * @param $string 需要处理的字符串或数组	 * @return mixed	 */	function new_stripslashes($string) {		if (!is_array($string)) {			return stripslashes($string);		}		foreach ($string as $key => $val) {			$string[$key] = $this->new_stripslashes($val);		}		return $string;	}	/**	 * 安全过滤函数	 * @param $string	 * @return string	 */	function safe_replace($string) {		$string = str_replace('%20', '', $string);		$string = str_replace('%27', '', $string);		$string = str_replace('%2527', '', $string);		$string = str_replace('*', '', $string);		$string = str_replace('"', '&quot;', $string);		$string = str_replace("'", '', $string);		$string = str_replace('"', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('<', '&lt;', $string);		$string = str_replace('>', '&gt;', $string);		$string = str_replace("{", '', $string);		$string = str_replace('}', '', $string);		$string = str_replace('\\', '', $string);		return $string;	}	/** 将用符号分隔的字符串 解析成 数组	 * @param $string	 * @param array $char	 * @return array	 */	function explodeChar($string, $char = array("\n", "|")) {		$array  = array();		$char01 = '';		$char02 = '';		if (is_array($char)) {			$char01 = $char[0];			$char02 = $char[1];} else { $char01 = $char;}		$options = explode($char01, $string);		foreach ($options as $v) {			$v = trim($v);			if (empty($v)) {				continue;			}			if ($char02) {				$arr = explode($char[1], $v);				if (!empty($arr[0]) || !empty($arr[1])) {					$array[trim($arr[1])] = trim($arr[0]);				}			} else {				$array[] = $v;			}		}		return $array;	}	/** 正则验证	 * @param $value	 * @param $type	 * @return bool	 */	function validate($value = '', $type = '') {		$validator = array(			'email'       => array('邮箱地址', '/^[^0-9][a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)*[@][a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)*[.][a-zA-Z]{2,4}$/'),			'mobile'      => array('手机号码', '/^1[0-9]{10,11}$/'),			'tel'         => array('电话号码', '/^[+]{0,1}(\d){1,4}[ ]{0,1}([-]{0,1}((\d)|[ ]){1,12})+$/'),			'url'         => array('网址', '/^(http|https|ftp):\/\/([A-Z0-9][A-Z0-9_-]*(?:\.[A-Z0-9][A-Z0-9_-]*)+):?(\d+)?\/?/i'),			'date'        => array('日期', '/^[0-9]{4}(\-|\/)[0-9]{1,2}(\\1)[0-9]{1,2}(|\s+[0-9]{1,2}(|:[0-9]{1,2}(|:[0-9]{1,2})))$/'),			'number'      => array('有效数值', '/^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/'),			'digits'      => array('数字', '/^\d+$/'),			'creditcard'  => array('信用卡号码', '/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6011[0-9]{12}|3(?:0[0-5]|[68][0-9])[0-9]{11}|3[47][0-9]{13})$/'),			'ip4'         => array('Ip地址', '/^(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/'),			'zipcode'     => array('邮编', '/^([0-9]{5})(-[0-9]{4})?$/i'),			'qq'          => array('qq号', '/^\d{5,}$/'),			'idcard'      => array('身份证号', '/^[1-9]([0-9]{14}|[0-9]{17})$/'),			'chinese'     => array('中文字符', '/^[\u4e00-\u9fa5]+$/'),			'english'     => array('英文字母', '/^[A-Za-z]+$/'),			'en_num'      => array('英文/数字/下划线组合', '/^\w+$/'),			'cn_username' => array('中文/英文/数字/下划线组合', '/^([\u4e00-\u9fa5]|[\w])+$/'),		);		if (!empty($value)) {			if (preg_match($validator[$type][1], $value) || !in_array($type, array_keys($validator))) {				return true;			}			return false;		} else {			return $validator;		}	}	/**读缓存文件		     * @params  string  $cache_name		     * @return  array   $data	*/	function read_static_cache($cache_name, $dir = 'static') {		static $result = array();		if (!empty($result[$cache_name])) {			return $result[$cache_name];		}		$cache_file_path = RUNTIME_PATH  . ($dir ? $dir . '/' : '') . $cache_name . '.php';		if (file_exists($cache_file_path)) {			include_once $cache_file_path;			$result[$cache_name] = isset($data) ? $data : '';			return $result[$cache_name];		} else {			return false;		}	}	/**写缓存文件		     * @param $cache_name		     * @param $caches		     * @return bool	*/	function write_static_cache($cache_name, $caches, $dir = 'static') {        $cache_dir = RUNTIME_PATH . ($dir ? $dir . '/' : '');		if (!is_dir($cache_dir)) {			mkdir($cache_dir, 0777, true);		}		$cache_file_path = $cache_dir . $cache_name . '.php';		$content         = "<?php ";		$content .= "\$data = " . var_export($caches, true) . ";";		$content .= " ?>";		file_put_contents($cache_file_path, $content, LOCK_EX);	}	/**	 * 清除缓存	 */	function clear_caches($type = '') {		$count = 0;		#所有数据缓存目录		$dirs = array(			'static'   => RUNTIME_PATH . 'static/',			'goodscat' => RUNTIME_PATH . 'goodscat/',			'topiccat' => RUNTIME_PATH . 'topiccat/',			'yun_cats' => RUNTIME_PATH . 'yun_cats/',			'web_tmp'  => RootDir . 'web/tmp', // web目录内部的临时文件		);				if (!empty($type) && isset($dirs[$type])) {			$dir  = $dirs[$type];			$dirs = $dir;		}		// fan 2016-06-08 start		// 解决目录是字符串也会被遍历的问题		if ($dirs && is_array($dirs)) {			foreach ($dirs as $dir) {				$folder = @opendir($dir);				if ($folder === false) {				 	continue;				}				 while (false != ($file = readdir($folder))) {				 	if ($file == '.' || $file == '..' || $file == 'index.htm' || $file == 'index.html') {				 		continue;				 	}				 	if (is_file($dir . $file)) {				 		if (@unlink($dir . $file)) {				 			$count++;				 		}				 	}				 }				 closedir($folder);				$count += clear_dir($dir);			}		}		// fan 2016-06-08 end		//清空缓存		S('CH_INDEX', NULL);        S("CH_INDEX_SIMPLE",NULL);		S('CH_NAV_B', NULL);		S('CM_MENUS_ALL_ID', NULL);		S('CM_MENUS_GROUP_ID'. '_' . GID, NULL);		S('CONFIG' , NULL);		S('C_LANG', NULL);        S("CH_TEAM_NAV",NULL);        S("CM_TOPIC_APPLY_LIST_0",NULL);        S("CM_TOPIC_APPLY_LIST_1",NULL);        S("CM_TOPIC_APPLY_LIST_2",NULL);        S("CM_TOPIC_APPLY_LIST_3",NULL);        S("CM_TOPIC_APPLY_LIST_4",NULL);        S("CM_TOPIC_APPLY_LIST_5",NULL);        S("CM_WXMSG_LIST",NULL);        S("CH_SPREAD_INDEX_1",NULL);        S("CH_SPREAD_INDEX_2",NULL);        S("CH_SPREAD_INDEX_3",NULL);        S("CH_SPREAD_INDEX_4",NULL);        S("CH_SPREAD_INDEX_5",NULL);        ///////首次清空缓存生成短信模板 start        if(!S('sms_templates')){            S('sms_templates',1);            $res_list = $this->db->select("select * from ###_templates ");            $smarty = smartyTpl();            $file_dir = str_replace('\\', '/', $smarty->template_dir[0]) . '/' . MERID . '/';			if (!is_dir($file_dir)) {				mkdir($file_dir, 0777, true);			}            $this->load->library('dir');            foreach($res_list as $k=>$v){                $filename = $file_dir. $v['template_code'] . '.html';                $this->dir->filePutContents($filename, $v['template_content']);            }        }        ///////生成短信模板 end                		return $count;	}	function check_post() {		if (strtoupper($_SERVER['REQUEST_METHOD']) != 'POST') {return false;}		return $this->check_referer();	}	function check_referer() {		$refer = getUrl('referer');		$R     = parse_url($refer);		if (strpos(RootUrl, $refer) !== false && strpos(RootUrl, $refer) == 0) {			return true;		}		return false;	}}?>