<?php/** * ZZCMS 数据库备份与还原 * ============================================================================ * * 版权所有 2014-2016 厦门紫竹数码科技有限公司，并保留所有权利。 * 网站地址: http://www.lnest.com； * ---------------------------------------------------------------------------- * 这不是一个自由软件！您只能在不用于商业目的的前提下对程序代码进行修改和 * 使用；不允许对程序代码以任何形式任何目的的再发布。 */class databack extends Lowxp {    /**     * 数据库备份/还原列表     * @param  String $type import-还原，export-备份     */    public function index($type = null){               switch ($type) {            /* 数据还原 */            case 'import':                if(!is_dir(DATABACK_PATH))mkdir(DATABACK_PATH, 0777,true);                //列出备份文件列表                $path = realpath(DATABACK_PATH);                                $flag = \FilesystemIterator::KEY_AS_FILENAME;                $glob = new \FilesystemIterator($path,  $flag);                $list = array();                foreach ($glob as $name => $file) {                    if(preg_match('/^\d{8,8}-\d{6,6}-\d+\.sql(?:\.gz|\.tar)?$/', $name)){                        $name = sscanf($name, '%4s%2s%2s-%2s%2s%2s-%d');                        $date = "{$name[0]}-{$name[1]}-{$name[2]}";                        $time = "{$name[3]}:{$name[4]}:{$name[5]}";                        $part = $name[6];                        if(isset($list["{$date} {$time}"])){                            $info = $list["{$date} {$time}"];                            $info['part'] = max($info['part'], $part);                            $info['size'] = $info['size'] + $file->getSize();                        } else {                            $info['part'] = $part;                            $info['size'] = $file->getSize();                        }                        $extension        = strtoupper(pathinfo($file->getFilename(), PATHINFO_EXTENSION));                        $info['compress'] = ($extension === 'SQL') ? '-' : $extension;                        $info['time']     = strtotime("{$date} {$time}");                        $list["{$date} {$time}"] = $info;                    }                }                krsort($list);                break;            /* 数据备份 */            case 'export':                $list  = $this->db->list_tables_datation();                $list  = array_map('array_change_key_case', $list);                break;            default:                $this->error('参数错误！');        }        //echo "<pre>";print_r($list);exit;        $this->smarty->assign('list', $list);        $this->smarty->display('manage/datation/'.$type.'.html');    }    /**     * 优化表     * @param  String $tables 表名     */    public function optimize(){        $tables = $_POST['tables'];                if($tables) {                    if(is_array($tables)){                $tables = implode(',', $tables);                $list = $this->db->query("OPTIMIZE TABLE {$tables}");                if($list){                    die(json_encode(array('error'=>0,'msg'=>'数据表优化完成')));                } else {                    die(json_encode(array('error'=>1001,'msg'=>'数据表优化出错请重试')));                }            } else {                $list = $this->db->query("OPTIMIZE TABLE `{$tables}`");                if($list){                    die(json_encode(array('error'=>0,'msg'=>"数据表{$tables}优化完成！")));                } else {                    die(json_encode(array('error'=>1001,'msg'=>"数据表{$tables}优化出错请重试！")));                }            }                    } else {                        die(json_encode(array('error'=>1002,'msg'=>'请指定要优化的表')));        }    }    /**     * 修复表     * @param  String $tables 表名     */    public function repair(){        $tables = $_POST['tables'];        if($tables) {               if(is_array($tables)){                $tables = implode('`,`', $tables);                $list = $this->db->query("REPAIR TABLE `{$tables}`");                if($list){                    die(json_encode(array('error'=>0,'msg'=>'数据表修复完成')));                } else {                    die(json_encode(array('error'=>1001,'msg'=>'数据表修复出错请重试')));                }                            } else {                $list = $this->db->query("REPAIR TABLE `{$tables}`");                if($list){                    die(json_encode(array('error'=>0,'msg'=>"数据表{$tables}修复完成！")));                } else {                    die(json_encode(array('error'=>1001,'msg'=>"数据表{$tables}修复出错请重试！")));                }                            }                    } else {                        die(json_encode(array('error'=>1002,'msg'=>'请指定要修复的表')));        }    }    /**     * 删除备份文件     * @param  Integer $time 备份时间     */    public function del(){        $time = $_POST['time'];        if(is_array($time)){            $flg = false;            foreach ($time as  $value) {                if($value){                    $name  = date('Ymd-His', $value) . '-*.sql*';                    $path  = realpath(DATABACK_PATH).DIRECTORY_SEPARATOR. $name;                    array_map("unlink", glob($path));                    if(!count(glob($path))){                        $flg = true;                    }                 } else {                    die(json_encode(array('error'=>1001,'msg'=>'参数错误！')));                }            }            if($flg){                die(json_encode(array('error'=>0,'msg'=>'备份文件删除成功！')));            }        }else{            die(json_encode(array('error'=>1002,'msg'=>'参数错误！')));        }            }    /**     * 备份数据库     * @param  String  $tables 表名     * @param  Integer $id     表ID     * @param  Integer $start  起始行数     */    public function export(){        $tables = $_REQUEST['tables'];        $id = intval($_REQUEST['id']);        $start = intval($_REQUEST['start']);        if($tables && is_array($tables)){ //初始化            //读取备份配置            $config = array(                'path'     => realpath(DATABACK_PATH).DIRECTORY_SEPARATOR,                'part'     => '20971520',                'compress' => '1',                'level'    => '9',            );            if(!is_dir(DATABACK_PATH))mkdir(DATABACK_PATH, 0777,true);                        //检查是否有正在执行的任务            $lock = "{$config['path']}backup.lock";            if(is_file($lock)){                die(json_encode(array('error'=>1001,'msg'=>'检测到有一个备份任务正在执行，请稍后再试！')));            } else {                //创建锁文件                //file_put_contents($lock, time());            }            //检查备份目录是否可写            is_writeable($config['path']) || die(json_encode(array('error'=>1002,'msg'=>'备份目录不存在或不可写，请检查后重试！')));            S('backup_config', null);            S('backup_config', $config);            //生成备份文件信息            $file = array(                'name' => date('Ymd-His', time()),                'part' => 1,            );            S('backup_file', null);            S('backup_file', $file);            //缓存要备份的表            S('backup_tables', null);            S('backup_tables', $tables);                        //创建备份文件            $this->load->library('databack',array("file"=>$file,"config"=>$config));            //$Databack = new Databack($file, $config);            if(false !== $this->databack->create()){                $tab = array('id' => 0, 'start' => 0);                die(json_encode(array('error'=>0,'msg'=>'初始化成功！','data'=>array('tables' => $tables, 'tab' => $tab))));            } else {                die(json_encode(array('error'=>1003,'msg'=>'初始化失败，备份文件创建失败！')));            }        } elseif (isset($id) && isset($start)) { //备份数据            $tables = S('backup_tables');                        //备份指定表            $this->load->library('databack',array("file"=>S('backup_file'),"config"=>S('backup_config')));            $start  = $this->databack->backup($tables[$id], $start);            if(false === $start){ //出错                die(json_encode(array('error'=>1004,'msg'=>'备份出错！')));            } elseif (0 === $start) { //下一表                if(isset($tables[++$id])){                    $tab = array('id' => $id, 'start' => 0);                    die(json_encode(array('error'=>0,'msg'=>'备份完成！','data'=>array('tab' => $tab))));                } else { //备份完成，清空缓存                    //unlink(S('backup_config')['path'] . 'backup.lock');                    S('backup_tables', null);                    S('backup_file', null);                    S('backup_config', null);                    die(json_encode(array('error'=>0,'msg'=>'备份完成！','data'=>array('tid' => $id))));                }            } else {                $tab  = array('id' => $id, 'start' => $start[0]);                $rate = floor(100 * ($start[0] / $start[1]));                die(json_encode(array('error'=>0,'msg'=>"正在备份...({$rate}%)",'data'=>array('tab' => $tab))));            }        } else { //出错            die(json_encode(array('error'=>1005,'msg'=>'参数错误！')));        }    }    /**     * 还原数据库     */    public function import($time = 0){        $part = $_REQUEST['part'];        $start = $_REQUEST['start'];        if(is_numeric($time) && !isset($_REQUEST['part']) && !isset($_REQUEST['start']) ){ //初始化            //获取备份文件信息            $name  = date('Ymd-His', $time) . '-*.sql*';            $path  = realpath(DATABACK_PATH).DIRECTORY_SEPARATOR. $name;            $files = glob($path);            $list  = array();            foreach($files as $name){                $basename = basename($name);                $match    = sscanf($basename, '%4s%2s%2s-%2s%2s%2s-%d');                $gz       = preg_match('/^\d{8,8}-\d{6,6}-\d+\.sql.gz$/', $basename);                $list[$match[6]] = array($match[6], $name, $gz);            }            ksort($list);                        //检测文件正确性            $last = end($list);            if(count($list) === $last[0]){                S('backup_list', null);                S('backup_list', $list); //缓存备份列表                die(json_encode(array('error'=>0,'msg'=>'正在还原...！', 'data'=>array('part' => 1, 'start' => 0))));            } else {                die(json_encode(array('error'=>1001,'msg'=>'备份文件可能已经损坏，请检查！')));            }        } elseif(is_numeric($part) && is_numeric($start)) {            $list  = S('backup_list');            $config =  array(                'path'     => realpath(DATABACK_PATH).DIRECTORY_SEPARATOR,                'compress' => $list[$part][2]            );            //$this->load->library('databack',$list[$part]);            $this->load->library('databack',array("file"=>$list[$part],"config"=>$config));            $start = $this->databack->import($start);                    if(false === $start){                die(json_encode(array('error'=>1001,'msg'=>'还原数据出错！')));            } elseif(0 === $start) { //下一卷                if(isset($list[++$part])){                    $data = array('part' => $part, 'start' => 0);                    die(json_encode(array('error'=>0,'msg'=>'正在还原...#{$part}', 'data'=>$data)));                } else {                    S('backup_list', null);                    die(json_encode(array('error'=>0,'msg'=>'还原完成！')));                }            } else {                $data = array('part' => $part, 'start' => $start[0]);                if($start[1]){                    $rate = floor(100 * ($start[0] / $start[1]));                    die(json_encode(array('error'=>0,'msg'=>"正在还原...#{$part} ({$rate}%)", 'data'=>$data)));                } else {                    $data['gz'] = 1;                    die(json_encode(array('error'=>0,'msg'=>"正在还原...#{$part}", 'data'=>$data)));                }            }        } else {            die(json_encode(array('error'=>1002,'msg'=>'参数错误！')));        }    }}