<?php/** * Class welcome */class welcome extends Lowxp {	function setImgSize() {		return;		$rows = $this->db->select("SELECT * FROM images");		foreach ($rows as $val) {			$path = $this->load->config('picture', 'image_dir') . $val['cate'] . '/' . $val['imgurl'];			if (is_file($path)) {				$data = getimagesize($path);				#echo '<pre>';print_r($data);echo '</pre>';				$size = $data[0] . 'x' . $data[1];				$this->db->update('images', array('size' => $size), array('id' => $val['id']));			}		}	}	/**	 * 算术验证码	 */	function scode() {		//生成验证码图片		Header("Content-type: image/PNG");		srand((double) microtime() * 1000000);		$w = 95; //宽		$h = 34; //高		$answer = '';		$authnum = 0;		$randnuml = rand(1, 50);		$randnumr = rand(1, 50);		$chars = array('+', '-');		$char = array_rand($chars, 1);		$char = $chars[$char];		switch ($char) {			case '+':				$authnum = $randnuml + $randnumr;				break;			case '-':				$randnumr = rand(0, $randnuml - 1);				$authnum = $randnuml - $randnumr;				break;			default:break;		}		$answer = $randnuml . $char . $randnumr . '=?';		$_SESSION['icode'] = iconv('gbk', 'utf-8', $authnum);		$im = imagecreate($w, $h);		$gray = imagecolorallocate($im, rand(230, 255), rand(230, 255), rand(230, 255));		imagefill($im, 0, 0, $gray);		/*创建干扰线等*/		for ($i = 0; $i < 10; $i++) {			$color = imagecolorallocate($im, mt_rand(0, 255), mt_rand(0, 255), mt_rand(0, 255));			imagearc($im, mt_rand(-10, $w), mt_rand(-10, $h), mt_rand(30, 300), mt_rand(20, 200), 55, 44, $color);		}		for ($i = 0; $i < 20; $i++) {			$color = imagecolorallocate($im, rand(0, 255), rand(0, 255), rand(0, 255));			imagesetpixel($im, rand() % 90, rand() % 30, $color);		}		imagettftext($im, 14, 10, 10, 34, imagecolorallocate($im, rand(0, 128), rand(0, 128), rand(0, 128)), RootDir . 'web/admin/fonts/scode.ttf', strtoupper($answer));		imagepng($im);		imagedestroy($im);	}	/** TODO:短信验证码获取入口	 * verify_code status字段说明（后续添加其它验证码需要往下扩展说明）	 * 1注册验证状态 2注册成功状态	 * 3	 */	function sms() {		$iTime = 60; #第ip第隔多少秒才能获取一次		//总开关		if (!$this->site_config['sms_open']) {			$this->api_result(array('msg' => '短信未开启'));		}		$mobile = isset($_POST['mobile']) ? trim($_POST['mobile']) : '';		$act = isset($_POST['act']) ? trim($_POST['act']) : '';		if (empty($act)) {			die;		}		//手机号为空时发送会员手机号		if (empty($mobile) && $_SESSION['mid']) {			$this->load->model('member');			$member = $this->member->member_info($_SESSION['mid']);			$mobile = $member['mobile'];		}		//模板开关		if (!statusTpl($act)) {			die;		}		//提交的手机号是否正确		if (empty($mobile) || ($this->base->validate($mobile, 'mobile') == false)) {			$result['error'] = 1;			$result['msg'] = '请填写正确的手机号!';			die(json_encode($result));		}		//需要重新设置的变量		$status = 1;		//注册验证码		if ($act == 'sms_register') {			$status = 1;			//提交的手机号是否已经注册帐号			//            $sql = "SELECT COUNT(mid) FROM ###_member WHERE mobile = '$mobile'";			//            if ($this->db->getstr($sql) > 0)			//            {			//                $result['error'] = 2;			//                $result['msg'] = '手机号已经被注册过!';			//                die(json_encode($result));			//            }		}		//身份证验证		elseif ($act == 'sms_idcard') {			$status = 3;		}		//银行卡验证		elseif ($act == 'sms_bankcard') {			$status = 4;		}		//支付密码验证		elseif ($act == 'sms_chpaypass') {			$status = 5;		} elseif ($act == 'sms_verifymobile') {			$status = 6;			//提交的手机号是否已经注册帐号			$sql = "SELECT COUNT(mid) FROM ###_member WHERE mobile = '$mobile'";			if ($this->db->getstr($sql) > 0) {				$result['error'] = 2;				$result['msg']   = '手机号已经被注册过!';				die(json_encode($result));			}		} elseif ($act == 'sms_password') {			$status = 7;			//提交的手机号是否已经注册帐号			$sql = "SELECT COUNT(mid) FROM ###_member WHERE mobile = '$mobile'";			if ($this->db->getstr($sql) <= 0) {				$result['error']   = 2;				$result['message'] = '该手机号未注册过!';				die(json_encode($result));			}		} else {die;}		//同操作同IP超过5次后禁止发送(防刷)		//注册验证时校对验证码//        if($act=='sms_register'){		//		//            $this->load->model('code');		//		//            $res = $this->code->check();		//		//            IF($res['code'] != 0){		//		//                die(json_encode(array('error'=>3,'msg'=>$res['msg'])));		//		//            }		//		//        }//        if(!empty($_SESSION['send_time']) && $_SESSION['send_time']+$iTime <= RUN_TIME){		//            $result['error'] = 3;		//            $result['message'] = '恶意请求';		//            die(json_encode($result));		//        }else{		//            $_SESSION['send_time'] = RUN_TIME;		//        }		/*$sql = "SELECT COUNT(id) FROM ###_verify_code WHERE status='$status' AND (getip='".getIP()."' OR mobile='$mobile')";			        if ($this->db->getstr($sql) > 3)			        {			            $result['error'] = 3;			            $result['message'] = '恶意请求';			            die(json_encode($result));		*/		//获取验证码请求是否获取过		$sql = "SELECT COUNT(id) FROM ###_verify_code WHERE status='$status' AND mobile='$mobile' AND getip='" . getIP() . "' AND dateline>'" . (time() - $iTime) . "'";		if ($this->db->getstr($sql) > 0) {			$result['error'] = 3;			$result['msg'] = '每IP每手机号每' . $iTime . '秒只能获取一次验证码。';			die(json_encode($result));		}		//获取验证码		if ($_SESSION['voiceVerify']) {			unset($_SESSION['voiceVerify']);		}		$this->load->library('sms');		$verifycode = $this->sms->getVerifyCode();		$this->smarty->assign('verify_code', $verifycode);		//发送短信		$ret = $this->sms->sendSmsTpl($mobile, $act);		if ($ret === true) {			$data = array(				'mobile'     => $mobile,				'getip'      => getIP(),				'verifycode' => $verifycode,				'dateline'   => time(),				'status'     => $status,			);			$this->db->save('###_verify_code', $data);			$result['error'] = 0;			$result['msg'] = '手机短信验证码发送成功';			die(json_encode($result));		} else {			$result['error'] = 4;			$result['msg'] = $ret ? $ret : '短信验证码发送失败!';			die(json_encode($result));		}	}	/**	 * 语音验证码入口	 */	function voice() {		$iTime = 60; #第ip第隔多少秒才能获取一次		//手机号为空时发送会员手机号		if ($_SESSION['mid']) {			$this->load->model('member');			$member = $this->member->member_info($_SESSION['mid']);			$mobile = $member['mobile'];		} else {			$mobile = isset($_REQUEST['mobile']) ? trim($_REQUEST['mobile']) : '';		}		//提交的手机号是否正确		if (empty($mobile) || ($this->base->validate($mobile, 'mobile') == false)) {			$result['error'] = 1;			$result['message'] = '请填写正确的手机号!';			die(json_encode($result));		}		if (!$_SESSION['mid']) {			//提交的手机号是否已经注册帐号			$sql = "SELECT COUNT(mid) FROM ###_member WHERE mobile = '$mobile'";			if ($this->db->getstr($sql) > 0) {				$result['error'] = 2;				$result['message'] = '手机号已经被注册过!';				die(json_encode($result));			}		}		$status = 10;		//获取验证码请求是否获取过		$sql = "SELECT COUNT(id) FROM ###_verify_code WHERE status='$status' AND mobile='$mobile' AND getip='" . getIP() . "' AND dateline>'" . (time() - $iTime) . "'";		if ($this->db->getstr($sql) > 0) {			$result['error'] = 3;			$result['message'] = '每IP每手机号每' . $iTime . '秒只能获取一次验证码。';			die(json_encode($result));		}		$verifycode = voiceVerify($mobile);		if ($verifycode) {			$data = array(				'mobile'     => $mobile,				'getip'      => getIP(),				'verifycode' => $verifycode,				'dateline'   => time(),				'status'     => $status,			);			$this->db->save('###_verify_code', $data);			$result['error'] = 0;			$result['message'] = '语音验证码发送成功';			die(json_encode($result));		} else {			$result['error'] = 4;			$result['message'] = '语音验证码发送失败!';			die(json_encode($result));		}	}	/**	 * 支付加密地址	 */	function pay() {		$this->load->model('payment');		$payment_info = $this->db->get("SELECT *  FROM payment WHERE pay_code = 'ipaynow'");		if (empty($payment_info)) {			$this->api_result(array('msg' => '支付方式未启用'));		}		$order['pay_id']   = $payment_info['pay_id'];		$order['pay_name'] = $payment_info['pay_name'];		$order['pay_code'] = $payment_info['pay_code'];		include_once AppDir . 'includes/modules/payment/' . $payment_info['pay_code'] . '.php';		$pay_obj = new $payment_info['pay_code'];		$payment = unserialize_config($payment_info['pay_config']);		echo $pay_obj->get_code(array(), $payment);	}	/**	 * 支付返回地址	 */	function respond($order_sn = "") {		//require_once AppDir . 'includes/modules/payment/ipaynow/utils/Log.php';		//payLog::outLog("爱贝通知", json_encode($_REQUEST));		include_once AppDir . 'function/payment.php';		/* 支付方式代码 */		$pay_code = !empty($_REQUEST['code']) ? trim($_REQUEST['code']) : 'aibei';		if (!empty($_REQUEST['oderNo']) && !empty($_REQUEST['payid'])) {			$pay_code = 'jubaopay';		}		if (isset($_REQUEST['tradeStatus'])) {			$pay_code = 'ipaynow';		}		$icon = 0;		if (empty($_REQUEST['code']) && !empty($order_sn)) {			$is_paid    = $this->db->getstr("SELECT is_paid FROM ###_pay_log WHERE log_id = '$order_sn'");			$icon       = 2;			$is_success = $is_paid ? 1 : 0;			$msg        = $is_paid ? '支付成功' : '支付失败';		} else {			//获取首信支付方式			if (empty($pay_code) && !empty($_REQUEST['v_pmode']) && !empty($_REQUEST['v_pstring'])) {				$pay_code = 'cappay';			}			//获取快钱神州行支付方式			if (empty($pay_code) && ($_REQUEST['ext1'] == 'shenzhou') && ($_REQUEST['ext2'] == 'ecshop')) {				$pay_code = 'shenzhou';			}			//获取微信支付方式			if (isset($_POST['return_code']) && isset($_POST['result_code'])) {				$pay_code = 'wxpaypc';				//处理微信回调参数				$file_in = $HTTP_RAW_POST_DATA;				$xml     = new DOMDocument();				$xml->loadXML($file_in);				$outTradeNos = $xml->getElementsByTagName('out_trade_no');				foreach ($outTradeNos as $outTradeNo) {					$_POST['order_sn'] = $outTradeNo->nodeValue;				}				$resultCodes = $xml->getElementsByTagName('result_code');				foreach ($resultCodes as $resultCode) {					$_POST['result_code'] = $resultCode->nodeValue;				}				$returnCodes = $xml->getElementsByTagName('return_code');				foreach ($returnCodes as $returnCode) {					$_POST['return_code'] = $returnCode->nodeValue;				}			}			/* 参数是否为空 */			if (empty($pay_code)) {				$msg = '支付方式不存在';			} else {				/* 检查code里面有没有问号 */				if (strpos($pay_code, '?') !== false) {					$arr1 = explode('?', $pay_code);					$arr2 = explode('=', $arr1[1]);					$_REQUEST['code']   = $arr1[0];					$_REQUEST[$arr2[0]] = $arr2[1];					$_GET['code']       = $arr1[0];					$_GET[$arr2[0]]     = $arr2[1];					$pay_code           = $arr1[0];				}				/* 判断是否启用 */				$payment = $this->db->get("SELECT * FROM ###_payment WHERE pay_code = '$pay_code' AND enabled = 1");				if (empty($payment)) {					$msg = '支付方式不可用';				} else {					$plugin_file = AppDir . 'includes/modules/payment/' . $pay_code . '.php';					/* 检查插件文件是否存在，如果存在则验证支付是否成功，否则则返回失败信息 */					if (is_file($plugin_file)) {						/* 根据支付方式代码创建支付类的对象并调用其响应操作方法 */						include_once $plugin_file;						$payment = new $pay_code();						if (isset($_REQUEST['ajax'])) {							if ((@$payment->respond())) {echo 'ok';die;} else {echo 'error';die;}						} else {							if (@$payment->respond()) {								$msg  = true;								$icon = 2;							} else {								$msg = false;							}						}					} else {						$msg = false;					}				}			}		}		if (isset($_REQUEST['payid'])) {			$html = '<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml">                          <head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head>                          <body style="text-align: center; background: #fff;">                          <div style="background: #303030;height: 48px;width: 100%;font-size:1.5rem;color: #fff;line-height: 48px;top: 0px;position: fixed;left: 0;top: 0;z-index: 99;">在线支付</div>';			$msg = $msg ? '支付成功' : '支付失败';			$html .= '<div style="padding:100px;font-size:30px;color:#fe5400;">' . $msg . '</div>';			$html .= '</body></html>';			die($html);		}		if ($_REQUEST['ajax']) {			die(json_encode(array('is_success' => $is_success)));		}		echo $msg ? 'success' : 'fail';	}	//生成微信二维扫码	function build_qrcode() {		$data = urldecode($_GET['data']);		require AppDir . 'library/phpqrcode/phpqrcode.php';		QRcode::png($data, false, "L", 6);		exit();	}	/**	 * 获取时时彩开奖结果	 * $qihao 格式如:141107006	 */	function lottery($qihao = '') {		$this->load->model('yunbuy');		$data = $this->yunbuy->lottery_code($qihao);		$this->api_result(array('data' => $data));	}	/**	 * 总参与人数	 */	function bidCount() {		$data = $this->base->read_static_cache('bidcount', '');		$data['count'] = str_pad($data['logCount'], 9, '0', STR_PAD_LEFT);		die(json_encode($data));	}	/**	 * 清除缓存	 */	function clearCaches() {		if (!$_POST) {			die;		}		$type = trim($_POST['type']);		$count = $this->base->clear_caches($type);		die($count);	}    /**     * 小程序二维码     */    function weapp_qrcode(){        $id = intval($_REQUEST['id']);        $param = array(            'path'       => "pages/goods/show?id=$id",            'width'      => '430',            'auto_color' => false,        );        $this->load->library('weapp');        @Header("Content-type: image/png");        echo $this->weapp->getwxacode($param);    }	// 助力图片	function assist_share($log_id = 0, $type = 1) {		$filename = $log_id . '.jpg';		$url      = RootUrl . '/upload/' . MERID . '/images/assist/' . $filename;		$res = array(			'data' => $url,		);		$row = $this->db->get("select L.id,L.mid,A.price,G.name,thumbs from ###_assist_log as L left join ###_assist as A on L.assist_id=A.id left join ###_goods as G on L.goods_id=G.id where L.id={$log_id}");		if (!$row) {			$this->api_result(array('flag' => false, 'msg' => '记录不存在'));		}		if ($row['thumbs']) {			$thumbs           = json_decode($row['thumbs'], true);			$row['img_cover'] = yunurl($thumbs[0]['path']);		}		$mid = $row['mid'];		$this->load->model('member');		$member = $this->member->member_info($mid);		$cover_width  = 0;		$cover_height = 0;		$cover        = gd_create_img($row['img_cover']);		if ($cover) {			$cover_width  = ImageSX($cover);			$cover_height = ImageSY($cover);		}		$resize_height = 600 * $cover_height / $cover_width;		$bg_width  = 640;		$bg_height = 400 + $resize_height;		$img = imagecreatetruecolor($bg_width, $bg_height);		$font  = WebDir . 'admin/fonts/msyh.ttf';		$white = imagecolorallocate($img, 255, 255, 255);		$black = imagecolorallocate($img, 0, 0, 0);		$gray  = imagecolorallocate($img, 150, 150, 150);		$red   = imagecolorallocate($img, 255, 0, 0);		imagefill($img, 0, 0, $white);		if ($cover_width) {			imagecopyresized($img, $cover, 20, 20, 0, 0, 600, $resize_height, $cover_width, $cover_height);		}		$avatar = photo($mid);		$avatar = gd_create_img($avatar);		if ($avatar) {			$avatar        = gd_round_bg($avatar);			$avatar_width  = ImageSX($avatar);			$avatar_height = ImageSY($avatar);			imagecopyresized($img, $avatar, 20, $resize_height + 40, 0, 0, 80, 80, $avatar_width, $avatar_height);		}		imagettftext($img, 20, 0, 430, $resize_height + 80, $gray, $font, '识别二维码领取');		gd_write_str($img, $member['username'], 120, $resize_height + 80, $font, $black, 2, 5);		imagettftext($img, 20, 0, 20, $resize_height + 160, $black, $font, '我免费领取了:');		gd_write_str($img, $row['name'], 20, $resize_height + 210, $font, $black, 3, 11);		imagettftext($img, 20, 0, 20, $resize_height + 320, $red, $font, '快来和我一起免费领取吧');		imagettftext($img, 20, 0, 20, $resize_height + 360, $red, $font, '0 元领,');		imagettftext($img, 20, 0, 110, $resize_height + 360, $gray, $font, ' 市场价 ' . $row['price'] . ' 元');		$this->load->library('weapp');		$qrcode_raw = $this->weapp->getwxacodeunlimit(array(			'scene' => 'assist_id=' . $log_id,			'page'  => 'pages/member/index',		));		if ($qrcode_raw) {			$qrcode = @imagecreatefromstring($qrcode_raw);			if ($qrcode) {				$qrcode_width  = ImageSX($qrcode);				$qrcode_height = ImageSY($qrcode);				imagecopyresized($img, $qrcode, 400, $resize_height + 130, 0, 0, 220, 220, $qrcode_width, $qrcode_height);			}		} else {			$res['qrcode_err'] = $this->weapp->getError();		}		imageinterlace($img, true);		$saveDir  = WebDir . 'upload/' . MERID . '/images/assist/';		$savePath = $saveDir . $filename;		if (!is_dir($saveDir)) {			mkdir($saveDir, 0777, true);		}		imagejpeg($img, $savePath);		imagedestroy($img);		$this->api_result($res);	}}